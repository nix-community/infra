repository:
  # See https://developer.github.com/v3/repos/#edit for all available settings.

  # The name of the repository. Changing this will rename the repository
  name: infra

  # A short description of the repository that will show up on GitHub
  description: nix-community infrastructure [maintainer=@zowoq]

  # A URL with more information about the repository
  homepage: "https://nix-community.org"

  # A comma-separated list of topics to set on the repository
  topics: "terraform, nixos, nix-darwin, nix-community-buildbot"

  # Either `true` to make the repository private, or `false` to make it public.
  private: false

  # Either `true` to enable issues for this repository, `false` to disable them.
  has_issues: true

  # Either `true` to enable projects for this repository, or `false` to disable them.
  # If projects are disabled for the organization, passing `true` will cause an API error.
  has_projects: false

  # Either `true` to enable the wiki for this repository, `false` to disable it.
  has_wiki: false

  # Either `true` to enable downloads for this repository, `false` to disable them.
  has_downloads: false

  # Updates the default branch for this repository.
  default_branch: master

  # Either `true` to allow squash-merging pull requests, or `false` to prevent
  # squash-merging.
  allow_squash_merge: false

  # Either `true` to allow merging pull requests with a merge commit, or `false`
  # to prevent merging pull requests with merge commits.
  allow_merge_commit: false

  # Either `true` to allow rebase-merging pull requests, or `false` to prevent
  # rebase-merging.
  allow_rebase_merge: true

  # Either `true` to enable automatic deletion of branches on merge, or `false` to disable
  delete_branch_on_merge: true

  # Either `true` to enable automated security fixes, or `false` to disable
  # automated security fixes.
  enable_automated_security_fixes: true

  # Either `true` to enable vulnerability alerts, or `false` to disable
  # vulnerability alerts.
  enable_vulnerability_alerts: true

  allow_auto_merge: true

# Labels: define labels for Issues and Pull Requests
#
labels:
#   - name: bug
#     color: CC0000
#     description: An issue with the system üêõ.

#   - name: feature
#     # If including a `#`, make sure to wrap it with quotes!
#     color: '#336699'
#     description: New functionality.

#   - name: Help Wanted
#     # Provide a new name to rename an existing label
#     new_name: first-timers-only

# Milestones: define milestones for Issues and Pull Requests
milestones:
#   - title: milestone-title
#     description: milestone-description
#     # The state of the milestone. Either `open` or `closed`
#     state: open

# Collaborators: give specific users access to this repository.
# See https://docs.github.com/en/rest/reference/repos#add-a-repository-collaborator for available options
collaborators:
  # - username: numtide-bot
  # Note: `permission` is only valid on organization-owned repositories.
  # The permission to grant the collaborator. Can be one of:
  # * `pull` - can pull, but not push to or administer this repository.
  # * `push` - can pull and push, but not administer this repository.
  # * `admin` - can pull, push and administer this repository.
  # * `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.
  # * `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.
  # permission: push

# See https://docs.github.com/en/rest/reference/teams#add-or-update-team-repository-permissions for available options
teams:
  - name: admin
    # The permission to grant the team. Can be one of:
    # * `pull` - can pull, but not push to or administer this repository.
    # * `push` - can pull and push, but not administer this repository.
    # * `admin` - can pull, push and administer this repository.
    # * `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.
    # * `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.
    permission: admin

# See https://docs.github.com/en/rest/repos/rules#update-a-repository-ruleset for all available ruleset properties and a description of each.
rulesets:
  - name: master
    target: branch
    enforcement: active
    conditions:
      ref_name:
        include:
          - "~DEFAULT_BRANCH"
        exclude: []
    rules:
      - type: deletion
      - type: non_fast_forward
      - type: required_status_checks
        parameters:
          strict_required_status_checks_policy: false
          required_status_checks:
            - context: buildbot/nix-build
      - type: pull_request
        parameters:
          dismiss_stale_reviews_on_push: false
          require_code_owner_review: false
          require_last_push_approval: false
          required_approving_review_count: 0
          required_review_thread_resolution: false
      - type: merge_queue
        parameters:
          check_response_timeout_minutes: 60
          grouping_strategy: ALLGREEN
          max_entries_to_build: 1
          max_entries_to_merge: 1
          merge_method: REBASE
          min_entries_to_merge: 1
          min_entries_to_merge_wait_minutes: 5
